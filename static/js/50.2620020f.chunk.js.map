{"version":3,"sources":["Demo/home/AddQuestion.js","Demo/home/ExamAdminQuestions.js","Demo/home/ExamTrainerQuestions.js","Demo/home/ExamQuestions.js"],"names":["AddQuestion","setIsQuestionsUpdated","useState","show","setShow","handleClose","initialState","lesson","question","answer","option_one","option_two","option_three","option_four","data","setData","lessonData","setLessonData","clearState","handleChange","e","target","id","value","a","key","preventDefault","formData","FormData","append","PostQuestions","console","log","useEffect","getTotalCourses","results","Modal","onHide","Form","Body","Group","Label","Control","as","onChange","map","item","index","Fragment","title","type","Footer","Button","variant","onClick","className","ExamAdminQuestions","isQuestionsUpdated","page","setPage","perPage","setPerPage","totalPage","setTotalPage","fetchedData","params","limit","offset","listQuestions","Math","ceil","count","onPageChange","newPage","paginationConfig","totalPages","currentPage","showMax","size","threeDots","prevNext","Row","Col","Card","style","marginTop","Header","md","Title","Table","responsive","hover","textAlign","length","scope","maxWidth","overflow","created_by","created_date","slice","display","alignItems","justifyContent","to","pathname","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Id","swal","text","icon","buttons","dangerMode","then","willDelete","deleteQuestion","window","location","reload","ExamTrainerQuestions","listTrainerQuestions","ExamQuestions","loggedInUser","useContext","AuthContext","is_admin"],"mappings":"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","file":"static/js/50.2620020f.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport {Row, Col, Form, Button, Modal} from 'react-bootstrap';\nimport { PostQuestions,getTotalCourses } from '../../api';\n\nfunction AddQuestion({setIsQuestionsUpdated}) {\n\n\tconst [show, setShow] = useState(false);\n\tconst handleClose = () => setShow(false);\n\tconst handleShow = () => setShow(true);\n\n\tconst initialState = {\n\t\tlesson: '',\n\t\tquestion: '',\n\t\tanswer: '',\n\t\toption_one: '',\n\t\toption_two: '',\n\t\toption_three: '',\n\t\toption_four: ''\n\t}\n\tconst [data, setData] = useState('');\n\tconst { lesson,question,answer,option_one,option_two,option_three,option_four } = data;\n\tconst [lessonData, setLessonData] = useState('');\n\n\tfunction clearState() {\n\t    setData({ ...initialState });\n\t  }\n\n\tfunction handleChange(e){\n\t\tsetData({...data, [e.target.id]: e.target.value})\n\t}\n\n\tasync function handleSubmit(e){\n\t\te.preventDefault();\n\t\ttry{\n\t\t\tconst formData = new FormData();\n\t\t\tfor (let key in data) {\n\t\t\t\tformData.append(key, data[key]);\n\t\t\t}\n\t\t\tawait PostQuestions(formData);\n\t\t\tsetIsQuestionsUpdated(true);\n\t\t\tclearState();\n\t\t\thandleClose();\n\t\t}catch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tuseEffect(()=>{\n\t\t(async() => {\n\t\t\tconst results = await getTotalCourses();\n\t\t\tsetLessonData(results.data.results);\n\t\t})()\n\t},[])\n\n\treturn(\n\t\t<>\t\n\t\t\t<Modal show={show} onHide={handleClose}>\n\t\t\t\t <Form>\n\t\t\t\t\t <Modal.Body>\n\t\t\t\t\t\t <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Example select</Form.Label>\n\t\t\t\t\t\t    <Form.Control as=\"select\" id=\"lesson\" onChange={handleChange}>\n\t\t\t\t\t\t     <option value=\"\">--Select--</option>\n\t\t\t\t\t\t     {lessonData && lessonData.map((item,index) => (\n\t\t\t\t\t\t     \t<React.Fragment key={index}>\n\t\t\t\t\t\t       \t\t<option value={item.id}>{item.title}</option>\n\t\t\t\t\t\t        </React.Fragment>\n\t\t\t\t\t\t     ))\n\t\t\t\t\t\t     }\n\t\t\t\t\t\t    </Form.Control>\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Question</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"question\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={question}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Answer</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"answer\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={answer}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Option One</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"option_one\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={option_one}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Option Two</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"option_two\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={option_two}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Option Three</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"option_three\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={option_three}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\n\t\t\t\t\t\t   <Form.Group>\n\t\t\t\t\t\t    <Form.Label>Option Four</Form.Label>\n\t\t\t\t\t\t    <Form.Control \n\t\t\t\t\t\t    \ttype=\"text\" \n\t\t\t\t\t\t    \tid=\"option_four\"\n\t\t\t\t\t\t    \tonChange={handleChange}\n\t\t\t\t\t\t    \tvalue={option_four}\n\t\t\t\t\t\t    />\n\t\t\t\t\t\t  </Form.Group>\n\t\t\t\t\t </Modal.Body>\n\t\t\t\t\t <Modal.Footer>\n\t\t\t          <Button variant=\"primary\" onClick={handleSubmit}>\n\t\t\t            Save\n\t\t\t          </Button>\n\t\t\t          <Button variant=\"secondary\" onClick={handleClose}>\n\t\t\t            Close\n\t\t\t          </Button>\n\t\t\t        </Modal.Footer>\n\t\t\t\t</Form>\n\t\t\t</Modal>\n\t\t\t<button className=\"label theme-bg2 text-white f-14 p-2\" onClick={handleShow}>Add Question</button>\n\t\t</>\n\t)\n}\nexport default AddQuestion;","import React, { useContext, useEffect, useState } from 'react';\nimport {Row, Col, Card, Table} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Pagination from 'react-bootstrap-4-pagination';\nimport swal from 'sweetalert';\nimport Aux from \"../../hoc/_Aux\";\nimport AddQuestion from './AddQuestion';\nimport { listQuestions,listTrainerQuestions,getTotalCourses,deleteQuestion } from '../../api';\n\nfunction ExamAdminQuestions() {\n\n\tconst [data, setData] = useState([]);\n\tconst [isQuestionsUpdated, setIsQuestionsUpdated] = useState(true);\n\tconst [page, setPage] = useState(1);\n  \tconst [perPage, setPerPage] = useState(10);\n  \tconst [totalPage, setTotalPage] = useState(1);\n\n\tfunction handleDelete(Id){\n\t\tswal({\n\t\t      title: \"Are you sure?\",\n\t\t\t  text: \"Once deleted, you will not be able to recover this data!\",\n\t\t\t  icon: \"warning\",\n\t\t\t  buttons: true,\n\t\t\t  dangerMode: true,\n\t\t    })\n\t\t.then((willDelete) => {\n\t    \tif (willDelete) {\n\t\t\t   deleteQuestion(Id);\n\t\t\t   setIsQuestionsUpdated(true);\n\t\t\t   window.location.reload();\n\t\t    }\n\t    })\n\t}\n\n\n\tuseEffect(()=>{\n\t\tconst fetchedData = async() => {\n\t\t\tconst params = {\n                limit: perPage,\n                offset: (page - 1) * perPage,\n            };\n\t\t\tvar results = await listQuestions(params);\n\t\t\tsetTotalPage(Math.ceil(results.data.count / 10));\n\t\t\tsetData(results.data.results);\n\t\t\tsetIsQuestionsUpdated(false);\n\t\t}\n\t\tif(isQuestionsUpdated){\n\t\t\tfetchedData()\n\t\t}\n\t},[isQuestionsUpdated])\n\n\tconst onPageChange = async (newPage) => {\n        setPage(newPage);\n        const params = {\n          limit: 10,\n          offset: (newPage - 1) * 10,\n        };\n\t\tvar results = await listQuestions(params);\n\t\tsetData(results.data.results);\n        setPerPage(newPage);\n    }\n\n    let paginationConfig = {\n      totalPages: totalPage,\n      currentPage: page,\n      showMax: 5,\n      size: \"sm\",\n      threeDots: true,\n      prevNext: true,\n      onClick: onPageChange\n    };\n\n\treturn(\n\t\t<>\n\t\t\t<Aux>\n\t            <Row>\n\t                <Col>\n\t                \t<Card style={{ marginTop: '-30px' }}>\n\t                \t\t<Card.Header>\n\t                \t\t\t<Row>\n\t\t                \t\t\t<Col md={10}>\n\t\t                            \t<Card.Title as=\"h5\">Questions</Card.Title>\n\t\t                            </Col>\n\t\t                            <Col md={2}>\n\t\t                            \t<AddQuestion setIsQuestionsUpdated={setIsQuestionsUpdated}/>\n\t\t                            </Col>\n\t                            </Row>\n\t                    \t</Card.Header>\n\t                        <Card.Body>\n\t                        <Table responsive hover style={{textAlign: 'center'}}>\n\t                            <thead>\n\t                                <tr>\n\t                                    <th>SN</th>\n\t                                    <th>Question</th>\n\t                                    <th>Answer</th>\n\t                                    <th>Created By</th>\n\t                                    <th>Created Date</th>\n\t                                    <th>Action</th>\n\t                                </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                            {data.results && data.results.length > 0 ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t                            {data && data.map((question,index) => (\n\t\t                                    <tr key={index}>\n\t\t                                        <th scope=\"row\"><i className=\"fas fa-check-circle\"></i></th>\n\t\t                                        <td style={{ maxWidth: '200px', overflow: 'auto' }}>{question.question ? question.question : 'N/A'}</td>\n\t\t                                        <td style={{ maxWidth: '200px', overflow: 'auto' }}>{question.answer ? question.answer : 'N/A'}</td>\n\t\t                                        <td>{question.created_by ? question.created_by : 'N/A'}</td>\n\t\t                                        <td>{question.created_date ? question.created_date.slice(0,10) : 'N/A'}</td>\n\t\t                                        <td style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n\t\t                                            <Link to={{ pathname:`question/${question.id}` }} className=\"pr-2 text-indigo-500\">\n\t\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n\t\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n\t\t                                                </svg>\n\t\t                                            </Link>\n\t\t                                            <Link to={{ pathname:`/question/edit/${question.id}` }} className=\"pr-2 text-indigo-500\">\n\t\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n\t\t                                                </svg>\n\t\t                                            </Link>\n\t\t                                            <button onClick={()=>handleDelete(question.id)} className=\"pr-2 text-indigo-500\">\n\t\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n\t\t                                                </svg>\n\t\t                                            </button>\n\t\t                                        </td>\n\t\t                                    </tr>\n\t\t                                ))}\n\t\t                                <Pagination {...paginationConfig} />\n\t\t                            </>\n\t\t                        ):(<p style={{ marginTop: '20px' }}>No Data</p>)}\n                                </tbody>\n\t                        </Table>\n                        </Card.Body>\n\t                    </Card>\n\t                </Col>\n\t            </Row>\n\t        </Aux>\n        </>\n\t)\n}\nexport default ExamAdminQuestions;","import React, { useContext, useEffect, useState } from 'react';\nimport {Row, Col, Card, Table} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Pagination from 'react-bootstrap-4-pagination';\nimport swal from 'sweetalert';\nimport Aux from \"../../hoc/_Aux\";\nimport AddQuestion from './AddQuestion';\nimport { listQuestions,listTrainerQuestions,getTotalCourses,deleteQuestion } from '../../api';\n\nfunction ExamTrainerQuestions() {\n\n\tconst [data, setData] = useState([]);\n\tconst [isQuestionsUpdated, setIsQuestionsUpdated] = useState(true);\n\tconst [page, setPage] = useState(1);\n  \tconst [perPage, setPerPage] = useState(10);\n  \tconst [totalPage, setTotalPage] = useState(1);\n\n\tfunction handleDelete(Id){\n\t\tswal({\n\t\t      title: \"Are you sure?\",\n\t\t\t  text: \"Once deleted, you will not be able to recover this data!\",\n\t\t\t  icon: \"warning\",\n\t\t\t  buttons: true,\n\t\t\t  dangerMode: true,\n\t\t    })\n\t\t.then((willDelete) => {\n\t    \tif (willDelete) {\n\t\t\t   deleteQuestion(Id);\n\t\t\t   setIsQuestionsUpdated(true);\n\t\t\t   window.location.reload();\n\t\t    }\n\t    })\n\t}\n\n\n\tuseEffect(()=>{\n\t\tconst fetchedData = async() => {\n\t\t\tconst params = {\n                limit: perPage,\n                offset: (page - 1) * perPage,\n            };\n\t\t\tvar results = await listTrainerQuestions(params);\n\t\t\tsetTotalPage(Math.ceil(results.data.count / 10));\n\t\t\tsetData(results.data.results);\n\t\t\tsetIsQuestionsUpdated(false);\n\t\t}\n\t\tif(isQuestionsUpdated){\n\t\t\tfetchedData()\n\t\t}\n\t},[isQuestionsUpdated])\n\n\tconst onPageChange = async (newPage) => {\n        setPage(newPage);\n        const params = {\n          limit: 10,\n          offset: (newPage - 1) * 10,\n        };\n\t\tvar results = await listTrainerQuestions(params);\n\t\tsetData(results.data.results);\n        setPerPage(newPage);\n    }\n\n    let paginationConfig = {\n      totalPages: totalPage,\n      currentPage: page,\n      showMax: 5,\n      size: \"sm\",\n      threeDots: true,\n      prevNext: true,\n      onClick: onPageChange\n    };\n\n\treturn(\n\t\t<>\n\t\t\t<Aux>\n\t            <Row>\n\t                <Col>\n\t                \t<Card style={{ marginTop: '-30px' }}>\n\t                \t\t<Card.Header>\n\t                \t\t\t<Row>\n\t\t                \t\t\t<Col md={10}>\n\t\t                            \t<Card.Title as=\"h5\">Questions</Card.Title>\n\t\t                            </Col>\n\t\t                            <Col md={2}>\n\t\t                            \t<AddQuestion setIsQuestionsUpdated={setIsQuestionsUpdated}/>\n\t\t                            </Col>\n\t                            </Row>\n\t                    \t</Card.Header>\n\t                        <Card.Body>\n\t                        <Table responsive hover style={{textAlign: 'center'}}>\n\t                            <thead>\n\t                                <tr>\n\t                                    <th>SN</th>\n\t                                    <th>Question</th>\n\t                                    <th>Answer</th>\n\t                                    <th>Created By</th>\n\t                                    <th>Created Date</th>\n\t                                    <th>Action</th>\n\t                                </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                            {data && data.length > 0 ? (\n                    \t\t\t<>\n\t\t                            {data && data.map((question,index) => (\n\t                                    <tr key={index}>\n\t                                        <th scope=\"row\"><i className=\"fas fa-check-circle\"></i></th>\n\t                                        <td style={{ maxWidth: '200px', overflow: 'auto' }}>{question.question ? question.question : 'N/A'}</td>\n\t                                        <td style={{ maxWidth: '200px', overflow: 'auto' }}>{question.answer ? question.answer : 'N/A'}</td>\n\t                                        <td>{question.created_by ? question.created_by : 'N/A'}</td>\n\t                                        <td>{question.created_date ? question.created_date.slice(0,10) : 'N/A'}</td>\n\t                                        <td style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n\t                                            <Link to={{ pathname:`question/${question.id}` }} className=\"pr-2 text-indigo-500\">\n\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n\t                                                </svg>\n\t                                            </Link>\n\t                                            <Link to={{ pathname:`/question/edit/${question.id}` }} className=\"pr-2 text-indigo-500\">\n\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n\t                                                </svg>\n\t                                            </Link>\n\t                                            <button onClick={()=>handleDelete(question.id)} className=\"pr-2 text-indigo-500\">\n\t                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t                                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n\t                                                </svg>\n\t                                            </button>\n\t                                        </td>\n\t                                    </tr>\n\t                                ))}\n\t                                <Pagination {...paginationConfig} />\n                                </>\n                                ):(<p style={{ marginTop: '20px' }}>No Data</p>)}\n                                </tbody>\n\t                        </Table>\n                        </Card.Body>\n\t                    </Card>\n\t                </Col>\n\t            </Row>\n\t        </Aux>\n        </>\n\t)\n}\nexport default ExamTrainerQuestions;","import React, { useContext } from 'react'\nimport { AuthContext } from '../../contexts/Auth';\nimport ExamAdminQuestions from './ExamAdminQuestions';\nimport ExamTrainerQuestions from './ExamTrainerQuestions';\nfunction ExamQuestions() {\n\n\tconst { loggedInUser } = useContext(AuthContext);\n\n\treturn(\n\t\t<>\n\t\t\t{loggedInUser && loggedInUser.is_admin ?(\n\t\t\t\t<ExamAdminQuestions />\n\t\t\t):(\n\t\t\t\t<ExamTrainerQuestions />\n\t\t\t)}\n        </>\n\t)\n}\nexport default ExamQuestions;"],"sourceRoot":""}